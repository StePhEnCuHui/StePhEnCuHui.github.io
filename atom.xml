<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Step By Step</title>
  
  <subtitle>耀出千分光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-07T06:40:32.187Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LiMinghui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构（四）——顺序栈</title>
    <link href="http://yoursite.com/2019/08/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E6%A0%88/"/>
    <id>http://yoursite.com/2019/08/05/数据结构（四）——顺序栈/</id>
    <published>2019-08-05T11:45:15.000Z</published>
    <updated>2019-08-07T06:40:32.187Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈——顺序栈"><a href="#栈——顺序栈" class="headerlink" title="栈——顺序栈"></a>栈——顺序栈</h1><h2 id="栈的概念"><a href="#栈的概念" class="headerlink" title="栈的概念"></a>栈的概念</h2><p>​        栈是只能在一端进行操作的线性表，栈顶（top）是可以进行插入（压栈）、删除（出栈）的一端，另一端则称为栈底，栈是 LIFO（后进先出）的存储结构</p><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><p>​        顺序栈是通过顺序存储方式，利用一组连续的存储单元依次存放栈底到栈顶的数据元素的数据结构</p><a id="more"></a><h3 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h3><p>​        和顺序表的定义相似，顺序栈也通过一个数组进行数据元素的存储，不同的是顺序栈还需存放一个 top 来表示栈顶的位置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;SeqStack;</span><br></pre></td></tr></table></figure><h3 id="顺序栈的初始化"><a href="#顺序栈的初始化" class="headerlink" title="顺序栈的初始化"></a>顺序栈的初始化</h3><p>​        顺序栈的初始化实际上就是为栈分配内存，并将栈顶位置（top）赋值为 -1 的过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SeqStack *<span class="title">InitSeqStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SeqStack *s;</span><br><span class="line">s = (SeqStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqStack));</span><br><span class="line">s-&gt;top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断顺序栈是否为空"><a href="#判断顺序栈是否为空" class="headerlink" title="判断顺序栈是否为空"></a>判断顺序栈是否为空</h3><p>​        判断顺序栈是否为空，只需要检测栈顶位置（top）是否为 -1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Empty_SeqStack</span><span class="params">(SeqStack *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s-&gt;top == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序栈入栈"><a href="#顺序栈入栈" class="headerlink" title="顺序栈入栈"></a>顺序栈入栈</h3><p>​        入栈又称压栈，顾名思义就是将数据压入栈中，原理是先检测栈是否已满，之后让栈顶指针自加 1，再令栈顶元素等于要压入的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push_SeqStack</span><span class="params">(SeqStack *s, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s-&gt;top == MAXSIZE - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">s-&gt;top++;</span><br><span class="line">s-&gt;data[s-&gt;top] = d;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"压入 "</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序栈出栈"><a href="#顺序栈出栈" class="headerlink" title="顺序栈出栈"></a>顺序栈出栈</h3><p>​        出栈又叫弹出，即将栈顶元素移除，可以把顺序栈想成一摞盘子，放盘子时需要把新放的盘子放在之前的盘子上，而取盘子时也要先取走后方上来的盘子，这就是 LIFO 后进先出存储结构的模型，同样的原理，出栈只需要令栈顶指针自减 1 即可，这里可以不用管原栈顶元素的值，因为在下一次压栈时，由于栈顶位置（top）已经前移，所以这个值就会被覆盖</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop_SeqStack</span><span class="params">(SeqStack *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"弹出 "</span> &lt;&lt; s-&gt;data[s-&gt;top] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s-&gt;top--;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h3><p>​        获取栈顶元素也很好理解，就是返回当前栈顶位置（top）锁对应的数据元素的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top_SeqStack</span><span class="params">(SeqStack *s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Empty_SeqStack(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (s-&gt;data[s-&gt;top]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        栈就是一个只能在一端进行操作的线性表，栈的这种特性也使他具有记忆的功能</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;栈——顺序栈&quot;&gt;&lt;a href=&quot;#栈——顺序栈&quot; class=&quot;headerlink&quot; title=&quot;栈——顺序栈&quot;&gt;&lt;/a&gt;栈——顺序栈&lt;/h1&gt;&lt;h2 id=&quot;栈的概念&quot;&gt;&lt;a href=&quot;#栈的概念&quot; class=&quot;headerlink&quot; title=&quot;栈的概念&quot;&gt;&lt;/a&gt;栈的概念&lt;/h2&gt;&lt;p&gt;​        栈是只能在一端进行操作的线性表，栈顶（top）是可以进行插入（压栈）、删除（出栈）的一端，另一端则称为栈底，栈是 LIFO（后进先出）的存储结构&lt;/p&gt;
&lt;h2 id=&quot;顺序栈&quot;&gt;&lt;a href=&quot;#顺序栈&quot; class=&quot;headerlink&quot; title=&quot;顺序栈&quot;&gt;&lt;/a&gt;顺序栈&lt;/h2&gt;&lt;p&gt;​        顺序栈是通过顺序存储方式，利用一组连续的存储单元依次存放栈底到栈顶的数据元素的数据结构&lt;/p&gt;
    
    </summary>
    
    
      <category term="李明徽的栈" scheme="http://yoursite.com/tags/%E6%9D%8E%E6%98%8E%E5%BE%BD%E7%9A%84%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（三）——双链表、循环链表</title>
    <link href="http://yoursite.com/2019/08/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E5%8F%8C%E9%93%BE%E8%A1%A8%E3%80%81%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/08/01/数据结构（三）——双链表、循环链表/</id>
    <published>2019-08-01T12:02:31.000Z</published>
    <updated>2019-08-07T06:40:16.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表——双链表、循环链表"><a href="#线性表——双链表、循环链表" class="headerlink" title="线性表——双链表、循环链表"></a>线性表——双链表、循环链表</h1><h2 id="双链表概念"><a href="#双链表概念" class="headerlink" title="双链表概念"></a>双链表概念</h2><p>​        双链表是链表的一种，也叫双向链表，因为双链表的每个物理节点增加一个指向后继节点的指针域和一个指向前驱节点的指针域</p><h2 id="循环链表概念"><a href="#循环链表概念" class="headerlink" title="循环链表概念"></a>循环链表概念</h2><p>​        循环链表也是链表的一种，他与单链表唯一的区别就是，循环链表的最后一个节点将指向头节点</p><a id="more"></a><h3 id="双链表定义"><a href="#双链表定义" class="headerlink" title="双链表定义"></a>双链表定义</h3><p>​        根据概念不难理解，双链表即在单链表的基础上，增加一个指向前驱节点的指针域，这里用 prior 表示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DLinkList</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">DLinkList *prior;<span class="comment">//指向前驱节点</span></span><br><span class="line">DLinkList *next;<span class="comment">//指向后继节点</span></span><br><span class="line">&#125;DLinkList;</span><br></pre></td></tr></table></figure><h3 id="头插法创建双链表"><a href="#头插法创建双链表" class="headerlink" title="头插法创建双链表"></a>头插法创建双链表</h3><p>​        头插法创建双链表的思路很简单，和单链表的思路几乎一致，不同在于除了需要不停的修改头节点的 next 指针以外，还要不断让新加入节点的前驱节点 prior 指向头节点，通过 while 循环来实现这一过程，就实现了头插法创建双链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DLinkList *<span class="title">CreateListF</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//头插法创建双链表</span></span><br><span class="line">DLinkList *L;</span><br><span class="line">L = (DLinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkList));</span><br><span class="line">L-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">DLinkList *s;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入整形数据，以 0 结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line"><span class="keyword">while</span> (d != <span class="number">0</span>) &#123;</span><br><span class="line">s = (DLinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkList));</span><br><span class="line">s-&gt;data = d;</span><br><span class="line">s-&gt;next = L-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">L-&gt;next-&gt;prior = s;</span><br><span class="line">L-&gt;next = s;</span><br><span class="line">s-&gt;prior = L;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入下一个数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法创建双链表"><a href="#尾插法创建双链表" class="headerlink" title="尾插法创建双链表"></a>尾插法创建双链表</h3><p>​        尾插法创建双链表也和单链表尾插法创建时的思路很像，先定义双链表的头尾两个指针，这里如果理解了单链表的尾插法，就不难理解之后通过尾指针不断“前移”（其实是通过这种方法来让新插入的节点被插入在老节点之前），实现尾插法创建双链表，并能与头节点相连</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DLinkList *<span class="title">CreateListT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//尾插法创建双链表</span></span><br><span class="line">DLinkList *s, *r, *L;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">L = (DLinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkList));</span><br><span class="line">r = L;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入整形数据，以 0 结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line"><span class="keyword">while</span> (d != <span class="number">0</span>) &#123;</span><br><span class="line">s = (DLinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkList));</span><br><span class="line">s-&gt;data = d;</span><br><span class="line">r-&gt;next = s;</span><br><span class="line">s-&gt;prior = r;</span><br><span class="line">r = s;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入下一个数据"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">&#125;</span><br><span class="line">r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h3><p>​        双链表的插入方法要定义一个 p 节点用来查找插入位置的前一个节点，即他的直接前驱节点，再定义一个 s 节点用来存放新加的数据，通过改变 p 节点的 next 和 p-&gt;next 的 prior 来将 s 节点插入在 p 节点之后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(DLinkList *L, <span class="keyword">int</span> pos, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">DLinkList *p = L;</span><br><span class="line">DLinkList *s;</span><br><span class="line"><span class="keyword">while</span> (i &lt; pos - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">s = (DLinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DLinkList));</span><br><span class="line">s-&gt;data = d;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">p-&gt;next-&gt;prior = s;</span><br><span class="line">s-&gt;prior = p;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h3><p>​        删除操作大体上和插入操作十分相似，先查找到删除位置的直接前驱节点，先改变直接前驱节点的 next 和要删除节点的 next 的 prior 来将要删除的节点隔离，再释放掉他的资源，就删除了这个节点，这里插入和删除操作都需要注意表头和表尾的处理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(DLinkList *L, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">DLinkList *p = L;</span><br><span class="line">DLinkList *q;</span><br><span class="line"><span class="keyword">while</span> (i &lt; pos - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">p-&gt;next-&gt;prior = p;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表遍历"><a href="#双链表遍历" class="headerlink" title="双链表遍历"></a>双链表遍历</h3><p>​        通过循环直接遍历双链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(DLinkList *L)</span> </span>&#123;</span><br><span class="line">DLinkList *p;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表的定义、创建、增、删、查等操作"><a href="#循环链表的定义、创建、增、删、查等操作" class="headerlink" title="循环链表的定义、创建、增、删、查等操作"></a>循环链表的定义、创建、增、删、查等操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LoopLinkList</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">LoopLinkList *next;</span><br><span class="line">&#125;LoopLinkList;</span><br><span class="line"><span class="comment">//创建（头插）</span></span><br><span class="line"><span class="function">LoopLinkList *<span class="title">CreateLoopList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LoopLinkList *head, *p;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">head = (LoopLinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LoopLinkList));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入数据，0结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line"><span class="keyword">while</span> (d != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">p = (LoopLinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LoopLinkList));</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;data = d;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line">p-&gt;next = head;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p = (LoopLinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LoopLinkList));</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p-&gt;data = d;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertList</span><span class="params">(LoopLinkList *head, <span class="keyword">int</span> pos, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">LoopLinkList *p = head;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; pos - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">LoopLinkList *r;</span><br><span class="line">r = (LoopLinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LoopLinkList));</span><br><span class="line">r-&gt;data = d;</span><br><span class="line">r-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">(LoopLinkList *head, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">LoopLinkList *p = head;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; pos - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">LoopLinkList *r;</span><br><span class="line">r = p-&gt;next;</span><br><span class="line">p-&gt;next = r-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchList</span><span class="params">(LoopLinkList *head, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">LoopLinkList *p = head;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; pos - <span class="number">1</span> &amp;&amp; p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> p-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出循环链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(LoopLinkList *L)</span> </span>&#123;</span><br><span class="line">LoopLinkList *p;</span><br><span class="line"><span class="keyword">if</span> (L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">p = L-&gt;next;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"数据如下"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == <span class="number">-842150451</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性表——双链表、循环链表&quot;&gt;&lt;a href=&quot;#线性表——双链表、循环链表&quot; class=&quot;headerlink&quot; title=&quot;线性表——双链表、循环链表&quot;&gt;&lt;/a&gt;线性表——双链表、循环链表&lt;/h1&gt;&lt;h2 id=&quot;双链表概念&quot;&gt;&lt;a href=&quot;#双链表概念&quot; class=&quot;headerlink&quot; title=&quot;双链表概念&quot;&gt;&lt;/a&gt;双链表概念&lt;/h2&gt;&lt;p&gt;​        双链表是链表的一种，也叫双向链表，因为双链表的每个物理节点增加一个指向后继节点的指针域和一个指向前驱节点的指针域&lt;/p&gt;
&lt;h2 id=&quot;循环链表概念&quot;&gt;&lt;a href=&quot;#循环链表概念&quot; class=&quot;headerlink&quot; title=&quot;循环链表概念&quot;&gt;&lt;/a&gt;循环链表概念&lt;/h2&gt;&lt;p&gt;​        循环链表也是链表的一种，他与单链表唯一的区别就是，循环链表的最后一个节点将指向头节点&lt;/p&gt;
    
    </summary>
    
    
      <category term="李明徽的线性表" scheme="http://yoursite.com/tags/%E6%9D%8E%E6%98%8E%E5%BE%BD%E7%9A%84%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（二）——单链表</title>
    <link href="http://yoursite.com/2019/07/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/07/25/数据结构（二）——单链表/</id>
    <published>2019-07-25T07:33:21.000Z</published>
    <updated>2019-08-07T06:43:06.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表——单链表"><a href="#线性表——单链表" class="headerlink" title="线性表——单链表"></a>线性表——单链表</h1><h2 id="单链表概念"><a href="#单链表概念" class="headerlink" title="单链表概念"></a>单链表概念</h2><p>​        单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链式存储不仅需要存储元素本身，还要存储一个指向其后继元素的地址，这种存储结构也被称为 node，存储数据的叫数据域，存储地址的叫指针域。</p><a id="more"></a><h3 id="单链表定义"><a href="#单链表定义" class="headerlink" title="单链表定义"></a>单链表定义</h3><p>​        链式存储结构需要存放数据的数据域和存放后继节点地址的指针域，所以在定义单链表时需要如下定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node* next;</span><br><span class="line">&#125;ListNode, LinkList;</span><br></pre></td></tr></table></figure><h3 id="单链表的创建"><a href="#单链表的创建" class="headerlink" title="单链表的创建"></a>单链表的创建</h3><p>​        单链表的创建从新插入的元素位置的不同分为头插法和尾插法</p><h4 id="头插法创建单链表"><a href="#头插法创建单链表" class="headerlink" title="头插法创建单链表"></a>头插法创建单链表</h4><p>​        头插法创建单链表即新插入的元素每次都会作为头指针 head 的后继节点，这样创建单链表时，每次插入新元素只需要修改 head 的指针，再让新节点的 next 指向原 head 指向的节点便可</p><p>​        具体的过程为：先为 head 节点和即将作为下一节点的 p 节点分配内存，再为 p 节点的数据域赋值，将 head 原本的 next 指针的值赋值给 p 的 next，再让 head 的 next 指向 p，这样就实现了在 head 后和上一次插入的节点前插入新节点的操作，使用 while 循环循环执行为 p 分配存储空间及其之后的代码，就实现了头插法创建单链表的过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">Creat_LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//头插法建立单链表</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">ListNode *head, *p;</span><br><span class="line">head = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入要录入的数以0结尾"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">p = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;data = x;</span><br><span class="line">p-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第% "</span> &lt;&lt; index &lt;&lt; <span class="string">" %次输入："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾插法创建单链表"><a href="#尾插法创建单链表" class="headerlink" title="尾插法创建单链表"></a>尾插法创建单链表</h4><p>​        尾插法创建单链表实际上就是头插法的反向方法，即每次新插入的节点都会被上一次插入的节点的 next 所指向，节点会按照输入的顺序一个一个添加在上一个结点之后</p><p>​        具体的过程为：先为头节点分配存储空间，然后将头节点的地址赋值给尾节点，这样在没进行其他操作之前，可以说头节点和尾节点是相同的，然后定义 p 节点并为其赋值，令当前的尾节点（第一次循环时尾节点就是头节点，之后的每次循环尾节点都会进行后移，所以每次插入新节点都可以想象成在头节点之后的最新节点和尾节点前添加）指向新节点，再将新节点赋值给尾节点，这里就是尾节点的后移，再令尾节点的 next 指向空，循环这部分的操作就实现了尾插法创建单链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">Creat_LinkList_R</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//尾插法建立单链表</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">ListNode *head, *p, *tail;</span><br><span class="line">head = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">tail = head;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入要录入的数以0结尾"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">p = (ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">p-&gt;data = x;</span><br><span class="line">tail-&gt;next = p;</span><br><span class="line">tail = p;</span><br><span class="line">tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###打印单链表</p><p>​        打印单链表的操作十分简单，传入头节点地址，定义一个当前节点位置的 p 节点，通过循环让 p 不停后移来获取每个节点中存放的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Print_List</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">ListNode *p = head-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第% "</span> &lt;&lt; index &lt;&lt; <span class="string">" %个元素是："</span>  &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###获取单链表长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length_List</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">ListNode *p = head;</span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">num++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###按照索引查找元素</p><p>​        原理同获取单链表长度的原理接近，先通过计数器 num 将当前节点 p 移动到索引 i 的位置，再获取当前节点 p 中存放的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">GetD_index</span><span class="params">(ListNode *head, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">//按照索引查找链表元素</span></span><br><span class="line">ListNode *p = head;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ((p-&gt;next != <span class="literal">NULL</span>) &amp;&amp; (num &lt; i)) &#123;</span><br><span class="line">num++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num == i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查找的元素是："</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###按照元素值查找元素</p><p>​        通过元素值查找链表中的数据也是需要通过当前节点 p 的不断后移，不停的取出每一个节点中的数据与目标值进行比较，直到找到值或者移动到了链表的结束</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetD_data</span><span class="params">(ListNode *head, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//按照元素值查找链表元素</span></span><br><span class="line">ListNode *p = head;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == data) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询到该元素，位置为% "</span> &lt;&lt; index &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###删除后继节点</p><p>​        先令 r = p-&gt;next，再让 p-&gt;next 指向 r-&gt;next，这样就已经将 p 的后继节点从链表中摘除了，最后释放 r 的资源就完成了后继节点的删除操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteAfter_LinkList</span><span class="params">(ListNode *p)</span> </span>&#123;</span><br><span class="line"><span class="comment">//删除后继节点</span></span><br><span class="line">ListNode *r;</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">r = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!r)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">p-&gt;next = r-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(r);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>（一）从存储结构上来说，顺序表存放在一串连续的地址中，而链表的每个节点的存储位置都是随机的，所以对链表进行插入、删除操作时的时间复杂度为 O(1)，但是查找时需要 O(n)，相反的，顺序表需要平均遍历一半的数据才能完成相同的插入、删除操作，复杂度为 O(n)，但是查找却为 O(1)</p><p>（二）从存储空间上说，顺序表需要预先分配好全部的存储空间，这样会造成资源的浪费或者不足等问题，而链表可以随用随分配，便捷的增删操作可以快速的为新节点分配存储空间</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性表——单链表&quot;&gt;&lt;a href=&quot;#线性表——单链表&quot; class=&quot;headerlink&quot; title=&quot;线性表——单链表&quot;&gt;&lt;/a&gt;线性表——单链表&lt;/h1&gt;&lt;h2 id=&quot;单链表概念&quot;&gt;&lt;a href=&quot;#单链表概念&quot; class=&quot;headerlink&quot; title=&quot;单链表概念&quot;&gt;&lt;/a&gt;单链表概念&lt;/h2&gt;&lt;p&gt;​        单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链式存储不仅需要存储元素本身，还要存储一个指向其后继元素的地址，这种存储结构也被称为 node，存储数据的叫数据域，存储地址的叫指针域。&lt;/p&gt;
    
    </summary>
    
    
      <category term="李明徽的线性表" scheme="http://yoursite.com/tags/%E6%9D%8E%E6%98%8E%E5%BE%BD%E7%9A%84%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（一）——线性表</title>
    <link href="http://yoursite.com/2019/07/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/07/24/数据结构（一）——顺序表/</id>
    <published>2019-07-24T00:14:04.000Z</published>
    <updated>2019-08-07T06:43:13.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表——顺序表"><a href="#线性表——顺序表" class="headerlink" title="线性表——顺序表"></a>线性表——顺序表</h1><h2 id="线性表概念"><a href="#线性表概念" class="headerlink" title="线性表概念"></a>线性表概念</h2><p>​        线性表是一种最基本、最简单、也是最常用的一种数据结构。一个线性表是 n 个具有相同特性的数据元素的有限序列。线性表中数据元素的对应关系是一对一，第一个元素没有直接前驱元素，最后一个元素没有直接后继元素，其他的元素都有唯一的前驱和后继元素。</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>​        顺序表是指在内存中以数组的形式保存的线性表，用一组地址连续的存储单元依次存储线性表中的元素，使逻辑结构相邻的两个元素存储在相邻的物理存储单元中，即顺序存储结构。</p><a id="more"></a><h4 id="顺序表定义："><a href="#顺序表定义：" class="headerlink" title="顺序表定义："></a>顺序表定义：</h4><p>​        MAXSIZE 为顺序表的最大允许存放多少个元素</p><p>​        定义顺序表的结构体变量，data 代表存放元素值的数组，因为数组中每个相邻元素在内存中的物理地址也是相邻的，length 表示顺序表中现有元素的个数，即顺序表的长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data[MAXSIZE];</span><br><span class="line"><span class="keyword">int</span> length;</span><br><span class="line">&#125;Seqlist;</span><br></pre></td></tr></table></figure><h4 id="顺序表初始化："><a href="#顺序表初始化：" class="headerlink" title="顺序表初始化："></a>顺序表初始化：</h4><p>​        初始化的过程就是在内存中申请了顺序表结构体的资源后，将顺序表的长度设置成 0，即新生成的空的顺序表，需要传入顺序表结构体的指针作为参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initlist</span><span class="params">(Seqlist* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断顺序表是否为空："><a href="#判断顺序表是否为空：" class="headerlink" title="判断顺序表是否为空："></a>判断顺序表是否为空：</h4><p>​        判断顺序表是否为空的过程就是取出结构体中 length 的值，检测其是否为 0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Listempty</span><span class="params">(Seqlist* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s-&gt;length == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按照元素索引查找元素："><a href="#按照元素索引查找元素：" class="headerlink" title="按照元素索引查找元素："></a>按照元素索引查找元素：</h4><p>​        按照元素索引查找元素，首先需要检测输入的 index 是否合法，如果输入合法，即取出该索引位置的元素值并返回 1，不合法就返回 0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Searchforindex</span><span class="params">(Seqlist* s, <span class="keyword">int</span> index, <span class="keyword">int</span>* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= s-&gt;length)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">*e = s-&gt;data[index];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按照元素值查找元素："><a href="#按照元素值查找元素：" class="headerlink" title="按照元素值查找元素："></a>按照元素值查找元素：</h4><p>​        使用 for 循环遍历结构体中存放元素值的数组，使传入的值与数组中的值一一比对，成功返回 1，失败返回 0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Searchfordata</span><span class="params">(Seqlist* s, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s-&gt;length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d == s-&gt;data[i])</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在指定索引位置插入元素："><a href="#在指定索引位置插入元素：" class="headerlink" title="在指定索引位置插入元素："></a>在指定索引位置插入元素：</h4><p>​        首先检测 index 是否合法，再判断顺序表是否已满，满就返回 1，符合就给索引位置的数组元素赋值，并使顺序表长度 +1 后返回 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insertlist</span><span class="params">(Seqlist* s, <span class="keyword">int</span> index, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; s-&gt;length)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s-&gt;length == MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;data[index] = d;</span><br><span class="line">s-&gt;length++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除指定索引位置的元素："><a href="#删除指定索引位置的元素：" class="headerlink" title="删除指定索引位置的元素："></a>删除指定索引位置的元素：</h4><p>​        同样先检测 index，非法返回 -1，然后通过 for 循环将 index 位置后（包括 index）的元素全部前移一位来确保顺序表的连续性，length - 2 的意思：如果顺序表是满状态，最后一位元素的 index 是 length - 1，删除一位之后只需要执行道 length - 2 的元素就可以实现元素前移，最后将 length - 1 并返回 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Deletelist</span><span class="params">(Seqlist* s, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; s-&gt;length)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; s-&gt;length - <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s-&gt;data[i] = s-&gt;data[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">s-&gt;length--;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>（一）优点：无须关心表中元素之间的关系，所以不用增加额外的存储空间；可以快速地取表中任意位置的元素。</p><p>（二）缺点：插入和删除操作需要移动大量元素。使用前需事先分配好内存空间，当线性表长度变化较大时，难以确定存储空间的容量。分配空间过大会造成存储空间的巨大浪费，分配的空间过小，难以适应问题的需求。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性表——顺序表&quot;&gt;&lt;a href=&quot;#线性表——顺序表&quot; class=&quot;headerlink&quot; title=&quot;线性表——顺序表&quot;&gt;&lt;/a&gt;线性表——顺序表&lt;/h1&gt;&lt;h2 id=&quot;线性表概念&quot;&gt;&lt;a href=&quot;#线性表概念&quot; class=&quot;headerlink&quot; title=&quot;线性表概念&quot;&gt;&lt;/a&gt;线性表概念&lt;/h2&gt;&lt;p&gt;​        线性表是一种最基本、最简单、也是最常用的一种数据结构。一个线性表是 n 个具有相同特性的数据元素的有限序列。线性表中数据元素的对应关系是一对一，第一个元素没有直接前驱元素，最后一个元素没有直接后继元素，其他的元素都有唯一的前驱和后继元素。&lt;/p&gt;
&lt;h2 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerlink&quot; title=&quot;顺序表&quot;&gt;&lt;/a&gt;顺序表&lt;/h2&gt;&lt;p&gt;​        顺序表是指在内存中以数组的形式保存的线性表，用一组地址连续的存储单元依次存储线性表中的元素，使逻辑结构相邻的两个元素存储在相邻的物理存储单元中，即顺序存储结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="李明徽的线性表" scheme="http://yoursite.com/tags/%E6%9D%8E%E6%98%8E%E5%BE%BD%E7%9A%84%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Servlet学习笔记</title>
    <link href="http://yoursite.com/2019/07/23/Servlet/"/>
    <id>http://yoursite.com/2019/07/23/Servlet/</id>
    <published>2019-07-23T07:44:38.000Z</published>
    <updated>2019-08-06T00:20:38.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet:"></a>Servlet:</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>​        侠义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者</p><p>​        Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器</p><p>​        本质上来讲 servlet 就是一种接口规范</p><a id="more"></a><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><p>​        运行在支持 java 的应用服务器上</p><p>​        Servlet 的实现遵循了服务器能够识别的规则，也就是服务器会自动的根据请求调用对应的 servlet 进行请求处理</p><h2 id="运行流程："><a href="#运行流程：" class="headerlink" title="运行流程："></a>运行流程：</h2><p>​        1.创建普通的 java 类并继承 HttpServlet</p><p>​        2.复写 service 方法</p><p>​        3.在 service 方法中书写逻辑代码</p><p>​        4.在 web 下的 WEB-INF 文件夹下的 web.xml 文件中配置 servlet</p><p>​        浏览器发送请求到服务器，服务器根据请求 URL 地址中的 URL 信息在 webapps 目录下找到对应的项目文件夹，然后再 web.xml 中检索到对应的 servlet，找到后调用并执行 servlet</p><h3 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h3><p>​        服务器地址:端口号（定位到要访问的本机内服务程序）/ webapps下的文件夹的名称（运行哪个文件夹中的代码）/要执行的 servlet 的 url-pattern （根据 xml 文件中的 class 确定运行哪个 .class 文件）</p><p>​        服务器地址:端口号/虚拟项目名/ servlet 的别名</p><h3 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h3><p>​        运行的是加载进内存中的 java 类</p><p>​        init() 方法只在 java 类加载进内存中的时候执行一次</p><p>​        servicec 方法是真正处理请求的方法</p><p>​        destroy 方法是在 servlet 被从内存中销毁（服务器关闭）时执行的</p><h3 id="Servlet-的生命周期："><a href="#Servlet-的生命周期：" class="headerlink" title="Servlet 的生命周期："></a>Servlet 的生命周期：</h3><p>​        从第一次调用，到服务器关闭，如果在 web.xml 中配置了 load-on-startup 则是从服务器开启到服务器关闭</p><h3 id="Service-方法和-doPost-方法、doPost-方法的区别："><a href="#Service-方法和-doPost-方法、doPost-方法的区别：" class="headerlink" title="Service 方法和 doPost 方法、doPost 方法的区别："></a>Service 方法和 doPost 方法、doPost 方法的区别：</h3><p>​        Service 方法：无论 get 方式的请求还是 post 方式的请求都可以进行处理，如果 servlet 中有 Service 方法，会优先调用 service 方法对请求进行处理</p><p>​        doGet 方法：处理 GET 请求</p><p>​        doPost 方法：处理 POST 请求</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet:&quot;&gt;&lt;/a&gt;Servlet:&lt;/h1&gt;&lt;h2 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h2&gt;&lt;p&gt;​        侠义的 Servlet 是指 Java 语言实现的一个接口，广义的 Servlet 是指任何实现了这个 Servlet 接口的类，一般情况下，人们将 Servlet 理解为后者&lt;/p&gt;
&lt;p&gt;​        Servlet 运行于支持 Java 的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下 Servlet 只用来扩展基于 HTTP 协议的 Web 服务器&lt;/p&gt;
&lt;p&gt;​        本质上来讲 servlet 就是一种接口规范&lt;/p&gt;
    
    </summary>
    
    
      <category term="李明徽的第一篇博客" scheme="http://yoursite.com/tags/%E6%9D%8E%E6%98%8E%E5%BE%BD%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/23/hello-world/"/>
    <id>http://yoursite.com/2019/07/23/hello-world/</id>
    <published>2019-07-23T07:07:59.144Z</published>
    <updated>2019-08-06T00:20:47.183Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
